generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ACCOUNT__ROLE_ALIAS {
  ADMIN
  USER
  PLOT_OWNER
}

enum USER__GENDER_ALIAS {
  MALE
  FEMALE
  OTHER
}

enum VEHICLE__TYPE_ALIAS {
  MOTORCYCLE
  CAR
  TRUCK
}

enum PARKING_LOT__STATUS_ALIAS {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum PARKING_SPOT__STATUS_ALIAS {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum RESERVATION__STATUS_ALIAS {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PARKING_RECORD__STATUS_ALIAS {
  ON_GOING
  COMPLETED
}

model Account {
  id String @id @default(cuid())

  email     String              @unique
  password  String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  role      ACCOUNT__ROLE_ALIAS

  user User?
}

model User {
  id String @id @default(cuid())

  firstName String
  lastName  String
  adderss   String
  phone     String
  avatarUrl String?
  gender    USER__GENDER_ALIAS

  vehicles          Vehicle[]
  parkingLotReviews ParkingLotReview[]
  parkingLots       ParkingLot[]
  paymentRecords    PaymentRecord[]
  reservations      Reservation[]
  userNotifications UserNotification[]

  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])
}

model UserNotification {
  id String @id @default(cuid())

  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Vehicle {
  id String @id @default(cuid())

  plate     String
  brand     String
  model     String
  color     String
  imageUrls String[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  type      VEHICLE__TYPE_ALIAS

  reservations   Reservation[]
  parkingRecords ParkingRecord[]

  ownerId String
  user    User   @relation(fields: [ownerId], references: [id])
}

model ParkingLot {
  id String @id @default(cuid())

  name      String
  latitude  Float
  longitude Float
  mediaUrls String[]
  ownerId   String
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  status    PARKING_LOT__STATUS_ALIAS

  parkingSpots       ParkingSpot[]
  parkingLotServices ParkingLotService[]
  parkingLotReviews  ParkingLotReview[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model ParkingLotReview {
  id String @id @default(cuid())

  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parkingLotId String
  parkingLot   ParkingLot @relation(fields: [parkingLotId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model ParkingLotService {
  id String @id @default(cuid())

  name         String
  description  String
  price        Float
  vehicleTypes VEHICLE__TYPE_ALIAS[]

  parkingLotId String
  parkingLot   ParkingLot @relation(fields: [parkingLotId], references: [id])
}

model ParkingSpot {
  id String @id @default(cuid())

  isAvailable Boolean
  vehicleType VEHICLE__TYPE_ALIAS

  reservations   Reservation[]
  parkingRecords ParkingRecord[]

  parkingLotId String
  parkingLot   ParkingLot @relation(fields: [parkingLotId], references: [id])
}

model Reservation {
  id String @id @default(cuid())

  checkInAt  DateTime?
  checkOutAt DateTime?
  totalPrice Float?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  status     RESERVATION__STATUS_ALIAS

  parkingRecord ParkingRecord?
  paymentRecord PaymentRecord?

  parkingSpotId String
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ParkingRecord {
  id String @id @default(cuid())

  checkInAt  DateTime?
  checkOutAt DateTime?
  totalPrice Float?
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @updatedAt
  status     PARKING_RECORD__STATUS_ALIAS

  userId String

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  parkingSpotId String
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id])

  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String      @unique
}

model PaymentRecord {
  id String @id @default(cuid())

  status    String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String      @unique
}
